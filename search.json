[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R-shinylive app in Quarto!",
    "section": "",
    "text": "Interested in deploying a Shiny application for R within Quarto without a server? Check out:\nhttps://github.com/coatless-quarto/r-shinylive-demo"
  },
  {
    "objectID": "index.html#sample-application",
    "href": "index.html#sample-application",
    "title": "R-shinylive app in Quarto!",
    "section": "Sample Application",
    "text": "Sample Application\nWeâ€™ll be walking through the process of creating the following R Shinylive application. Please be aware that it may take some time to load.\n#| standalone: true\n#| viewerHeight: 600\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(eurostat)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(sf)\n\n# Downloading and manipulating the tabular data\ndata &lt;- get_eurostat(\"migr_imm8\", time_format = \"num\") %&gt;%\n  # Subset to NUTS-3 level\n  dplyr::filter(age == \"TOTAL\", sex== \"T\", agedef == \"COMPLET\") \nnames(data)[names(data) == \"geo\"] &lt;- \"id\"\n\n# Downloading geospatial data\ngeodata &lt;- read_sf(\"https://raw.githubusercontent.com/eurostat/Nuts2json/master/pub/v2/2021/3035/20M/0.json\")\n\n# Merge with attribute data with geodata\nmaps &lt;- inner_join(geodata, data, by=\"id\")\n\n# Define UI for application that draws a map and line chart\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Immigration by Age and Sex\"),\n\n    # Select input for the chosen country and year\n    sidebarLayout(\n        sidebarPanel(\n            selectInput(\"TIME_PERIOD\", \"Year\", choices = c(1990:2021)),\n            selectInput(\"id\",\n                        \"Country\",\n                        choices = list(\n                          \"Austria\" =   \"AT\",   \n                          \"Belgium\" =   \"BE\",   \n                          \"Bulgaria\" =  \"BG\",\n                          \"Switzerland\" = \"CH\",\n                          \"Cyprus\" =    \"CY\",\n                          \"Czech Republic\" =    \"CZ\",\n                          \"Germany\" = \"DE\",\n                          \"Denmark\" =   \"DK\",\n                          \"Estonia\" =   \"EE\",\n                          \"Greece\" = \"EL\",\n                          \"Spain\" = \"ES\",\n                          \"Finland\" = \"FI\",\n                          \"France\" =    \"FR\",\n                          \"Croatia\" = \"HR\",\n                          \"Hungary\" =   \"HU\",\n                          \"Ireland\" = \"IE\",\n                          \"Iceland\" = \"IS\",\n                          \"Italy\" = \"IT\",\n                          \"Liechtenstein\" = \"LI\",\n                          \"Lithuania\"   = \"LT\",\n                          \"Luxembourg\" = \"LU\",\n                          \"Latvia\" =    \"LV\",\n                          \"North Macedonia\" = \"MK\",\n                          \"Malta\"   = \"MT\",\n                          \"Netherlands\" =   \"NL\",\n                          \"Norway\" = \"NO\",\n                          \"Poland\" =    \"PL\",\n                          \"Portugal\" =  \"PT\",\n                          \"Romania\" =   \"RO\",\n                          \"Sweden\"  = \"SE\",\n                          \"Slovenia\" =  \"SI\",\n                          \"Slovakia\" =  \"SK\",\n                          \"United Kingdom\"  = \"UK\"))\n        ),\n\n        # Show a plot of the country and year\n        mainPanel(\n          plotOutput(outputId = \"map\"),\n          plotOutput(outputId = \"timetrend\"),\n        )\n    )\n)\n\n# Define server logic required \nserver &lt;- function(input, output) {\n\n  output$timetrend &lt;- renderPlot({\n    ggplot(maps%&gt;%filter(id == input$id),aes(x=TIME_PERIOD,y=values))+\n      geom_line(aes(colour = \"blue\"))+\n      labs(title = \"Trend of Immigration of the EU countries\", \n           x = \"Year\", y = \"Frequency\")\n  })\n\n  output$map &lt;- renderPlot({\n    ggplot(maps%&gt;%filter(TIME_PERIOD == input$TIME_PERIOD))+\n      geom_sf(aes(fill=values))+\n      scale_fill_gradient(low = \"red\", high = \"green\", name = \"Number of Immigrants\", label = scales::comma)+\n      labs(title = \"The Number of Immigrants in a Year\")\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  }
]